#+TITLE: Test Case Generation Using Fuzzing In C++
#+OPTIONS: num:nil toc:nil
#+LATEX_HEADER: \usepackage{graphicx}
#+LATEX_HEADER: \usepackage{listings}
#+LATEX_HEADER: \lstset{language=c++,basicstyle=\ttfamily}
* Inbox :noexport:
** efop logo / elte logo
** content
*** reduce introduction
*** shorter demo for cefp
** code
*** DONE output sanitizercoverage flags
*** DONE fix output colors
* How do we verify software?
** Unit Testing
**** Advantages
1. Essential for writing quality software
2. Most straightforward to reason about compared to other methods
3. Faster to implement and run
**** Disadvantages
1. Not trivial to choose meaningful combinations
2. Hard to determine edge cases
3. Relies too much on the developer

\note{Let's illustrate this problem by the simplest example. And I will use this class later to show how the program works}
** Example
\lstinputlisting[language=C++,firstline=5,lastline=9]{examples/stack.h}
\lstinputlisting[language=C++,firstline=11,lastline=15]{examples/stack.h}
*** ...
# \lstinputlisting[language=C++,firstline=3]{test/integrationTestClass.h}
# \note{This class has few primitive members, and already requires /TODO/As a result, other means have been developed}
** Example :noexport:
\lstinputlisting[language=C++,firstline=12,lastline=22]{test/integrationTestClass.cc}
** Static & Dynamic Analysis
- Used for finding vulnerabilities
- Concentrates on edge cases, not on general logic of the application
- As opposed to unit testing, it is *independent* from the developer
  \note{so it's general, foolproof}
# *** TODO can be seen as edge cases
\note{Most relevant for this project was}
* Fuzzing
** How fuzzing works
- gives the program some input (array of bytes)
\note{for example, if you have a text editor, you would convert it to a string.}
\note{You could even treat it as an input for a compiler}
- measures coverage that the bytes triggerred
- saves successful inputs and mutates them to generate new ones
*** API is usually expected to :noexport:
- Have single endpoint that consumes any kind of data \note{because otherwise there will be too many complexities and variabilities}
- No exceptions, aborts, exits, crashes, timeouts
- Very first instance of any of it will cause termination
\note{and the user will recieve info on which input caused the crash and where}
** What is accomplished
*** Exposes Interface vulnerabilities
- Ones that are hard to detect manually
- Achieves *powerful* results in very short time
 \note{Heartbleed bug was discovered in a matter of minutes}
  \note{was a critical security bug in the OpenSSL cryptography library}
  \note{one of the most well-known and dangerous security bugs of all time, was there for years}
*** In order to produce input, it uses
- Generational and mutation-based methods
- Coverage-guided engine
  \note{and these two ideas could be applied in other direction of software ver.}
* Coverage based fuzzing for generating test cases
\note{and now we move to my project}
\note{we would need to formulate the problem encountered in unit tests}
\note{in a way which would give us the opportunity of using dynamic analysis}
** Motivation
- Unit tests verify that *functions* have behave as expected for a particular
  *internal state*
- Ideally, proper encapsulation is used so internal state is the result of other function calls
- Therefore, we could treat a single test case as a sequence of function calls
  on the member
** What is different from fuzzing
Instead of using *sequence of bytes* as input, we will generate *sequence of member function calls*
\note{fuzzing hasn't been used for this purpose before}
** What is different from fuzzing :cefp:
\note{just short remark}
*** Some changes
- User will need to pass more information to the program, compared to
  \note{so it's a little bit more verbose}
- Expect control flow disruptions and save which ones caused it
** Overall description of the solved problems
We need something that will
\note{independent functionalities}

1. Store pointers to member functions
   \note{we will need different type signatures, managing arguments, etc}
2. Generate sequences of calls
   \note{this is a fuzz related problem.}
3. Observe coverage resulting from these calls
   \note{introduce SanitizerCoverage library here}
4. Compare the results and determine most efficient

* Demo
** Summary
This program could enable developers to
- automatically generate *minimal* test cases with *high coverage* for their
  libraries
  \note{and therefore,}
- have a *generic* helper for testing the *logic* of the application, just like
  static&dynamic analysis for vulnerabilities
* Thank you for attention
* Demo :noslides:
** Installation
only build and test
mention unit tests
** go through the main file
\note{metnion that users are developers and editing is expected}
** Run and discuss results
*** cases
**** ---
**** on each iteration, stack of size 3 is returned, and it discovered the case where you push more times

** ? Show memory errors
