#+TODO: TODO UPNEXT DOING REVIEW | DONE CANCELLED
#+OPTIONS: \n:t H:5 toc:nil title:nil 
#+LATEX_CLASS: book 
#+TITLE: Test Case Generation Based On Fuzzing For C++

#+LATEX_HEADER: \date{2019}

#+LATEX_HEADER: \degree{Computer Science BSc}

#+LATEX_HEADER: \supervisor{Zoltan Porkolab}
#+LATEX_HEADER: \affiliation{Associate Professor, PhD}


#+LATEX_HEADER: \university{Eötvös Loránd University}
#+LATEX_HEADER: \faculty{Faculty of Informatics}
#+LATEX_HEADER: \department{Department of Programming Languages}
#+LATEX_HEADER: \departmentSecondLine{ And Compilers } 
#+LATEX_HEADER: \city{Budapest}
#+LATEX_HEADER: \logo{elte_cimer_szines}
#+LATEX_HEADER: \documentlang{english}
#+LATEX_HEADER: \newcommand*{\code}{\lstinline[keywordstyle=\color{violet}, basicstyle=\color{violet}]}

#+LATEX_HEADER: \usepackage{endnotes}
#+LATEX_HEADER: \renewcommand{\footnote}{\endnote}

#+LATEX_HEADER: \lstset{numbers=left, stepnumber=1}
\setcounter{page}{1}
#+TOC: headlines 0

* Inbox                                                            :noexport:
** DONE thesis declaration
CLOSED: [2019-01-28 Mon 21:11]
added on [2018-12-26 Wed 13:42]
** CANCELLED https://mcss.mosra.cz/doxygen/
CLOSED: [2019-05-08 sze 13:13]
** Code tasks 
*** DONE components
CLOSED: [2019-05-08 sze 14:11]
**** CANCELLED generate reports
CLOSED: [2019-05-08 sze 13:13]
**** CANCELLED use a separate class in the extern functions
CLOSED: [2019-05-08 sze 13:13]
*** DONE move the sanitizercoverage flag to coveragereported
CLOSED: [2019-05-13 h 14:47]
don't forget to update docs
*** DONE add an integration test
CLOSED: [2019-05-08 sze 13:14]
*** results
**** CANCELLED have the set of covered pc blocks and check when it reaches max, halt
CLOSED: [2019-05-08 sze 13:14]
***** maybe when the block doesn't have any new covered pc, apply some different rules
**** CANCELLED have some messages for the user
CLOSED: [2019-05-08 sze 13:14]
# :)
*** DONE change colors for the printresults output (main and integration test)
CLOSED: [2019-05-13 h 14:47]
 added on [2019-05-08 sze 01:15]
*** TODO in functionPointerMap talk about all the cool features I'm using
 added on [2019-04-13 szo 13:23]
*** CANCELLED try out testing an hpp file
CLOSED: [2019-05-13 h 14:46]
 added on [2019-05-08 sze 08:43]
** Thesis tasks
*** figs
! Don't forget to have captions and refer to them from the text
**** DONE code snippets
CLOSED: [2019-05-13 h 14:46]
**** CANCELLED binary tree for permutationGenerator
CLOSED: [2019-05-13 h 14:46]
*** other notes
**** you should aim for the shorter combination length
**** determining when to insert a sequence that is a union of two sets is not trivial
*** technical - writing
**** DONE fix section-subsection etc
CLOSED: [2019-05-13 h 14:40]
 added on [2019-05-08 sze 09:12]
**** DONE go through listings and number them
CLOSED: [2019-05-13 h 14:40]
 added on [2019-05-08 sze 08:59]
**** DONE references chapter
CLOSED: [2019-05-13 h 14:40]
*** technical
**** DOING check Makefile inputminteds
**** TODO fix page for refman
 added on [2019-05-08 sze 08:36]
**** TODO listings inlcude line numberings
 added on [2019-05-08 sze 09:04]
**** TODO myrefman compile error for doxygen package
 added on [2019-05-08 sze 08:35]
**** TODO thesis margins check and fix for myrefman too
*** DONE add a separate section for tests and describe test scenarios. 
CLOSED: [2019-05-11 Sat 14:16]
** DONE add filenames to listing captions
CLOSED: [2019-05-11 Sat 14:16]
 added on [2019-05-09 cs 13:25]
* Introduction
Most software heavily relies on unit tests as its primary source for logic and fault tolerance verification. This approach has been largely considered as essential, but it has some inherent difficulties associated with it. Although testing single member functions independently is more often than not trivial, most of the time the user will call various combinations of them. It is impossible to write unit tests with all possible function call sequences since such space is effectively infinite. Therefore, the need arises for the developer to personally determine which function call sequences are most meaningful. 

Other than that, a lot of times the behavior of the function will depend on internal state of the instance, which is in itself reached after certain function calls.
** Background
*** Fuzzing
Dynamic analysis, or fuzzing, is a popular and effective method of finding vulnerabilities in software. Fuzz testing reaches impressive results in exposing interface vulnerabilities in very short amount of time. 

Fuzzing heavily relies on the concept of Fuzz target - a function that accepts an array of bytes and then uses it in user defined way against the API under test. This API usually has a single endpoint that consumes any kind data. Anything that causes an exception, abort, exit, crash, assert failure, timeout is considered a bug[fn:presentation libfuzzer]. That means, discovery of the first instance of any one of them will cause the libfuzzer to halt and inform us about the input that caused the bug, along with some other information. 

There are a number of tools available for fuzzing, including AFL and Radamsa. One of the most notable implementations is Libfuzzer, LLVM's tool for coverage guided, evolutionary fuzzing engine[fn:libfuzzer docs]. The code coverage information for libFuzzer is provided by LLVM’s SanitizerCoverage instrumentation, and I will discuss it in the next subsection.
*** SanitizerCoverage library
LLVM has an interface for its built-in code coverage instrumentation[fn:sanitizer coverage docs]. The user is able to gather information about the covereged regions of the program during runtime. There are severeal different levels of depth for coverage, and the library also offers rich ways to trace the data flow. This tool was crucial for the development of my program and in the developer's manual, I discuss the library in more detail.

** _using fuzz testing for .._
Although fuzz testing has been mostly defined to be for exploiting the vulnerabilities of the program, _we decided_ to apply its coverage based philosophy to explore the possible member function call sequences and pinpoint ones which might be most interesting for the developer.
This also required to change the overall approach with which fuzzing is used. 

In [[Fuzzing]] Background on Fuzzing, I talked about the classical assumptions about the fuzz target. In our scenario, we have different expectations - since we are testing an entire unit and not a single API endpoint, some kind of control flow disruptions might be expected. For example, assertions are common in member functions. Therefore, the previous approach of exiting on first such failure should be modified to allow the program to gather information about all possible combinations that result in things like exceptions, so the user will be informed about them and decide what constitues the normal behavior of their library and what is outside of specifications.

** Program description
To acheive the intended results, I created a program that uses LLVM's \code{SanitizerCoverage} library and generation based fuzzing. The test case needs almost minimal setup which consists of the user specifying all the member functions it wants to use in testing, and passing a single function pointer for constructing an instance of the class. Modern c++ tools have aided greatly with this by giving the ability to store pointers to functions with different type signatures. There are still difficulties with regards to determining and passing the function arguments, which is in scope of a larger project. In order for this issue to not interfere with the initial program implementation, I allow users to additionally pass pointers to the functions that will in turn call the specific member function with desired arguments.
 
** Results
Although the original intention was to discover new test cases, there were some surprising outcomes that could not have been anticipated. For example, the program is very good in minimizing the total number of test cases, since it only saves the new sequence of function calls if new coverage was discovered, or if it replaces one or more other sequences by combining their result together. This outcome would be crucial for reducing the size of test suites, which leads to reduced runtime and maintenance cost.
* User Documentation
This software aids in finding test cases for a single class interface by trying out different permutations of member function calls and discovering ones that give the most coverage. In this chapter, I provide full information about its usage for users of the program. I will be using a simple stack implementation as an example[fn:stack implementation]. 
** Intended audience
This software is intended for c++ developers who would like to discover meaningful function call sequences that provide good coverage for their interface/class. Therefore, at least basic knowledge of c++ is assumed, and the user will need to implement and pass pointers for several functions.

*** Requirements
Some restrictions apply with regards to the test target class. It should satisfy following for the program to work properly:
**** The program is intended to test a single unit
Current version can not analyze any of the dependencies of the class in some cases. Although the feature might be able to work with multiple classes and different member functions, only single one is supported at this stage.
**** You need to be able to be compiled separately
In order to analyze , the object file of the test target needs to be compiled with special flags separately from the rest of the project. This means the implementation of the class can not be spread in multiple files, and those files should not contain anything else
** System Requirements
Following dependencies need to be installed in order to 
- GNU Make 4.0+
- Clang 7.0+ with AddressSanitizer (inlcuded with the compiler by default)
** Installation instructions
run these commands from the directory where you have copied the contents of the project and run commands provided in Listing [[Installation commands]]
#+CAPTION: Installation commands
#+LABEL: Installation commands
#+BEGIN_listing bash
# download the contents from the provided disk  
cd <dir> # where dir is the path of the folder

make test-main
# this command compiles everything and runs unit tests
 
make integration-test-run 
# makes sure that AddressSanitizer library works properly
#+END_listing
After tests pass successfully, you can move on to next step and set up the project to test your class.  
** Instructions using an example
After installation, and successful tests, you need to modify the contents of \code{src/main.cc} file and several lines in \code{Makefile}. I will demonstrate the instructions using an example.
*** Sample stack  class
Listing [[stack definition]] shows the definition for the class that the project tests by default. Full implementation can be found in corresponding \code{.cpp} file of the same directory. I will go through the example and explain how it can be adjusted for any other class.
#+CAPTION: definition for the stack class in \code{examples/stack.h}
#+LABEL:  stack definition
#+BEGIN_listing
\inputminted[firstline=6,lastline=24]{c++}{examples/stack.h}
#+END_listing
*** Structure of the main file
The user is adviced to only change the contents of \lstinline{main()} function, and replace the \lstinline{#include} directive. I will explain how to construct the \code{CombinationTester} class instance. More details about how classes used in the \code{main.cc} file work and way they are engineered can be found in the [[Developer Documentation]] Developer Documentation.
**** 1. Include your header file and provide it's path 
_TODO_
**** 2. 

**** 3. Construct the 

***** Choosing the number of maximum combinations
Feel free to tweak this number to suit your library's needs. If the functions are relatively small but there is a greater number of them, it is more reasonable to settle for numbers lower than 5. In some cases large size of functions requires a very specific state of the class which can only be achieved by more function calls. Such cases will better be resolved by mutation-based fuzzing.
**** Choose the output format
After finishing, you can ask the coverageReporter to show results by simply printing it or writing to a file
_(functions here)_
*** Compile and run
If you followed the instructions in the previous section, you are ready to generate test cases for your class using \code{`make run`} command.
**** Understanding the output
After the program is done running, it will display the results as you indicated in the end of \code{main.cc} file. The example is provided in Listing [[stack output]], 3 different sequences of function calls that will cover the blocks listed below them. The results are not perfect and contain a small number of redundancy, but all different scenarios are discovered, including the one where calls of \code{pop()} occur more times than \code{push()}.

#+CAPTION: Output of program for the \code{stack} class
#+LABEL: stack output
#+BEGIN_listing
\inputminted{text}{results.txt}
#+END_listing
***** memory leaks
Since the program will be compiled using the \code{`-fsanitize=address`} compiler flag to include the library that is respobsible for observing coverage. \code{AddressSanitizer} library detects memory issues that your unit might have. For example, if we were to remove the destructor from the \code{stack} implementation, we would get the message shown on Listing [[Memory leak]].
#+CAPTION: Memory leak discoverd when the destructor is missing
#+LABEL: Memory leak
#+BEGIN_src text

==30539==ERROR: LeakSanitizer: detected memory leaks

Direct leak of 10656 byte(s) in 645 object(s) allocated from:
    #0 0x4f2f22 in operator new[](unsigned long) ...
    #1 0x4fe6ae in stack<int>::stack(int) examples/stack.cpp:11:11
    #2 0x4ffcb5 in main::$_1::operator()(int) const ...
    #3 0x4ffc79 in main::$_1::__invoke(int) (bin/main+0x4ffc79)
    #4 0x5015c6 in CombinationTester<stack<int> >::run() ...
    #5 0x4ff6c7 in main (bin/main+0x4ff6c7)
    #6 0x7fa3bbaeeb96 in __libc_start_main ...

SUMMARY: AddressSanitizer: 10656 byte(s) leaked in 645 allocation(s).
#+END_src

For more information about interpreting and fixing these messages visit documentation for AddressSanitizer[fn:addresssanitizer docs].
** Troubleshooting
Following issues might arise during different parts of using the program.  
*** Installation
the tests are designed so that all of the underlying infrastructure will be checked. If you start having any problems:
**** test if clang build works correctly
If there were problems with the \code{make integration-test-run} command, it will be because \code{AddressSanitizer} is experiencing issues. 
*** Running
**** Out of Memory error for AddressSanitizer
This happens if the source code size is too large, resulting in a lot of guards and callbacks. Please refer to the requirements section. This error could be fixed by advanced tweaking of the \code{AdressSanitizer options}, but as for now is not supported in the project. 
* Developer Documentation 
This chapter discusses the structure and contents of the source directory, essential concepts for development and reasoning behind some of the architecture decisions. It also provides overview of the tools necessary for development, along with their usage.
** Dependencies and internal architecture
Before diving into the specifics, I would like to introduce some material that is necessary for understanding why - and how, everything works. First, I will give a brief overview to the Sanitizer Coverage library and introduce the test class which will illustrate core concepts of both the library and my program.
*** Sanitizer Coverage library
The program relies primarily on LLVM's built in coverage instrumentation to measure coverage of different function cal sequences. Basic understanding of how these functions work is necessary for development. 

With \code{`-fsanitize-coverage=trace-pc-guard`} flag, the clang compiler will insert the following code on every edge of the control flow. Every edge will have its own guard_variable (uint32_t), and in the end the instrumentation will look as given on Listing [[guard example]]. Here, "pc" stands for "program counter", and I used this term in the source code and tests as well to describe the parts of the program. 

#+CAPTION: How SanitizerCoverage instrumentation looks
#+LABEL: guard example
#+BEGIN_src c++
if(*guard)
    __sanitizer_cov_trace_pc_guard(guard); 
#+END_src

There is another function that will be called at least once per dynamic shared object (it may be called more than once with the same values of start/stop).

\code{__sanitizer_cov_trace_pc_guard_init(uint32_t *start, uint32_t *stop);}

These callbacks are not implemented in the Sanitizer run-time and should be defined by the user. This mechanism is used for fuzzing the Linux kernel, as well as the libfuzzer library mentioned earlier.

Let me illustrate this using an example. First let us introduce a simple class on Listing [[integrationTestClass definition]]. Most functions have descriptive names and their implementation does exactly that, so I will explain only what \code{f4()} does, and also note that \code{f4()} returns a simple integer value without any calculations. 

#+CAPTION: Definition of the class used in integration tests
#+LABEL: integrationTestClass definition
#+BEGIN_listing
\inputminted[firstline=3,lastline=16]{c++}{test/integrationTestClass.h}
#+END_listing

As you will observe on Listing [[IntegrationTestClass implementation]], there are 3 different scenarios for \code{f4()}, each one being a simple \code{return} statement. Sanitizer Coverage will insert guards on entry point of each of them. The rest of the functions will simply have guards inserted in the beginning. 

#+CAPTION: Implementation of \code{IntegrationTestClass::f2()} provided in \code{test/integrationTestClass.cc}, with inserted guards highlighted _(TODO)_
#+LABEL: IntegrationTestClass implementation
#+BEGIN_listing c++
\inputminted[firstline=12,lastline=22]{c++}{test/integrationTestClass.cc}
#+END_listing

Sanitizer Coverage library offers three different levels for observing the control flow of the program. Instrumentation points can be an edge, basic blocks, and function entry points. For this project, using the default edge one was more appropriate, since the target of fuzzing will be small and we can afford detailed coverage.  Sanitizer coverage also has different ways to trace data flow, for example callbacks for comparison operations and switches. These could aid in refining the program for more complex applications later.

In the next section, I will continue the \code{IntegrationTestClass} example. It serves as a good demonstration for showing how the program works, before going into the details about each unit.
*** Example
Let us get back to our test class and think about how we would accomplish to cover all three blocks of \code{f4()}. 

#+CAPTION: output of \code{make integration-test-run} shows that the program covered all different cases for \code{IntegrationTestClass}
#+LABEL: integration test output
#+BEGIN_listing
\inputminted[fontsize=\small,breaklines]{text}{integration-test-results.txt}
#+END_listing

As you see, the program manages to find . _TODO_ Listing [[integration test output]]

_TODO_ this should be included in user docs I think
You will observe that tweaking the number of maximum sequence length will increase the number of covered blocks per unit test (and have larger sequences of function calls) while significantly decreasing the total number of unit tests, until it collapses to very few, maybe even one. It is not reasonable to test the entire logic in a single test, and also not clear _when to stop growing_, and it might also vary from the complexity of the unit. However, it is always guaranteed that a longer sequence will never replace a shorter one if their coverage is the same, as observed when tweaking the number from 6 to 7 for IntegrationTestClass.
Right now, it is recommended to start with smaller number of function calls. It is hard to determine the threshold after which having a larger coverage per unit test stops being important. Choosing the right combination of number of function calls with regards to number of covered blocks was not in scope of current project. 

*** documentation
This was a higher-level overview of the core concepts used for the program. The rest of the documentation is provided in the last section of this chapter. All classes are thoroughly documented in header files, and some more detailed explanation and reasoning is sometimes provided in implementation files. For documentation generation, Doxygen library is used with javadoc style. 

If you have \code{doxygen} installed, Run \code{doxygen Doxyfile} to generate documentation in html and latex source. Latex source needs additional compiling which can be done by running the command \code{make} in the \code{latex} directory. If you would like to change doxygen settings, you can copy the Doxyfile and run \code{doxygen Doxyfile}.
*** code conventions
Code is formatted according to LLVM coding standard[fn:coding standards]. Clang-format is used and can be added to commit hook, or alternatively use clang-format plugin for IDE of your choice. 
** Makefile and project layout
As mentioned before, the project is compiled using GNU make, since it was more straightforward to express the different compilation commands and necessary flags for Sanitizer library. Each recipe is self documenting by using @echo to display its purpose when invoked. Since this is the most crucial information, it is highlighted in shell output. After that the compile command is displayed in less bright color, so that the user and developer are not distracted but can still observe which commands are being ran.
*** Source directory contents 
Here is a brief overview of the source directory. Each of the subdirectories is displayed alongside corresponding variable in the Makefile.

**** $(INC) - include
Header files. Definitions for all classes of the project. It also contains definition of the template classes along with ther implementation. The \lstinline{lib} subdirectory holds the header file of the testing framework.
**** $(SRCDIR) - src
Implementations of non-template classes from \lstinline{include} directory and a sample for the main file, which should be replaced by user for its own test target unit.
**** $(BUILDDIR), $(TARGETDIR) - build, bin
Output for binary and object files
**** $(TESTDIR) - test
Test directory. Tests are discussed in detail in [[Testing strategy]] Testing strategy, but compilation instructios will be provided here.
*** Other Makefile variables
**** $(SRCEXT)
_...._ \code{.cc} is reserved for special file types, will be discussed later
**** $(CC)
Clang++ is used for all compilation commands
**** $(INC)
Adds \code{include} and \code{include/lib} (containing the test library) directories to include path. 
*** Targets
**** Object files for classes
Located in \code{src} directory, ending with \code{.cpp} file extension. Listing [[Makefile main]] shows 
**** Program test target class
**** Object files for tests
**** Integration test target class
*** Compilation commands
**** main and default command
#+CAPTION: TODO Makefile main in \code{Makefile}
#+LABEL: Makefile main
#+BEGIN_listing
\inputminted[firstline=47,lastline=63,breaklines]{bash}{Makefile}
#+END_listing
\{make run} runs \code{bin/main}, which is compiled by default when running \code{make}, with all necessary parts. These include: _TODO_   Listing [[Makefile main]]
***** Object files from the \code{src} directory
***** Program Test target class, compiled with instrumentation
Steps discussed in Section [[SanitizerCoverage library]]
***** Compiler flag for AddressSanitizer
This flag is responsible for callbacks using the guards instrumented in the test target object file
**** docs
Generates the documentation as described in Section [[documentation]]
**** clean
Empties the output directories.
**** test and integration test
These commands are discussed more later in Section [[Testing strategy]]. 
** Testing strategy
The project is thoroughly tested using the catch2 framework. Tests are represented with Behavior-driven Given-When-Then style, and described scenarios carefully follow documentation. This library was chosen for its minimalistic setup and ability to describe the test cases with full sentences. 

*** Catch2 library
Catch is a multi-paradigm test framework for C++, distributed as a single header file. Though that does not mean that it needs to be compiled into every translation unit.  Since it needs to be defined just once and used for any test case, it is possible and more efficient[fn:catch slow compile] to compile it to an object file which is later included in tests, as displayed on Listings [[catch main]] and [[catch compile]].

#+CAPTION: contents of \code{test/catch2-main.cpp} defining the main function for test framework
#+LABEL: catch main
#+BEGIN_listing
\inputminted{c++}{test/catch2-main.cpp}
#+END_listing

After this, we can compile the test files. Unit tests follow the convention by having the corresponding class name followed by "-test" suffix, and their compilation recipe is shown in Listing [[catch include]]. The exception to this is the integration test, which was discussed in Section [[Example]]. I will provide some more details about it in this section. 

#+CAPTION: compiling contents of \code{test/catch-main.cpp}
#+LABEL: catch compile
#+BEGIN_listing
\inputminted[firstline=70,lastline=75]{bash}{Makefile}
#+END_listing

#+CAPTION: including compiled \code{catch2-main.cpp} in tests and compiling them
#+LABEL: catch include
#+BEGIN_listing
\inputminted[firstline=77,lastline=91,breaklines]{bash}{Makefile}
#+END_listing

The library offers two different ways of structuring test cases, and I chose the GIVEN-WHEN-THEN one because of its behavior driven style syntax, which allowed me to express expectations more concisely.

*** An example test case
The library was created by test driven development, and all features discussed in documentation have a corresponding test case. I will walk through one example in more detail. Unit with most scenarios was \code{CoverageReporter}, since it needs to decide when the new coverage was meaningful/worth storing. _TODO finish this paragraph_ 

First, _TODO_

I also paid attention to error handling. Listing [[test exception]] shows the scenario when the user flushes collected coverage but forgets setting a sequence beforehand. This needs to hold true after flushing any number of times, which is why I first start the coverage and flush correctly, but do not call the \code{startCoverage()} function for the second time.

#+CAPTION: Asserting that CoverageReporter communicates the error in case of developer forgetting to set the sequence.
#+LABEL: test exception
#+BEGIN_listing
\inputminted[firstline=122,lastline=134,breaklines]{c++}{test/coverageReporter-test.cpp}
#+END_listing

*** Integration test 
The example discussed in Section [[Example]] is used to test the class \code{combinationTeste}. Since this class only combines the functionalities of other ones without adding a lot of logic and scenarios, I use the test case to determine that the Sanitizer Coverage library properly works and at least one pc is reported during runtime. The compilation commands are very similar to the ones used for \code{main.cc}, and they are provided in Listing [[Makefile integration-test]]
#+CAPTION: Compiling the integration test \code{Makefile}
#+LABEL: Makefile integration-test
#+BEGIN_listing
\inputminted[firstline=97,lastline=118,breaklines]{bash}{Makefile}
#+END_listing

\chapter*{References}


[fn:presentation libfuzzer] Fuzzing APIs, https://github.com/CppCon/CppCon2017/blob/master/Demos/Fuzz%20Or%20Lose/Fuzz%20Or%20Lose%20-%20Kostya%20Serebryany%20-%20CppCon%202017.pdf

[fn:libfuzzer docs] Libfuzzer documentation, https://llvm.org/docs/LibFuzzer.html

[fn:sanitizer coverage docs] Clang SanitizerCoverage library Documentation, https://clang.llvm.org/docs/SanitizerCoverage.html

[fn:stack implementation] _TODO_, https://www.techiedelight.com/stack-implementation-in-cpp/

[fn:addresssanitizer docs] Clang AddressSanitizer documentation, https://clang.llvm.org/docs/AddressSanitizer.html

[fn:coding standards] LLVM coding standards, https://llvm.org/docs/CodingStandards.html

[fn:catch slow compile] Improving catch library compilation, https://github.com/catchorg/Catch2/blob/master/docs/slow-compiles.md#top

[fn:clang format] Clang-Format documentation, https://clang.llvm.org/docs/ClangFormatStyleOptions.html

_TODO maybe just don't have too many references :)_

# \chapter*{}
